sd = sqrt(sig2[i-1] * sig2_0 / (sig2[i-1] + sig2_0) / n))
sig2[i] <- 1 / rgamma(1, shape = n / 2 + 1, scale = sum((y - beta[i] * x)^2) / 2 + sig2_0 / 2)
}
# 保留burn-in期之后的样本并进行抽样
beta.sample <- beta[(burn.in+1):n.iter][seq(1, (n.iter-burn.in)/thin, by = 1)]
sig2.sample <- sig2[(burn.in+1):n.iter][seq(1, (n.iter-burn.in)/thin, by = 1)]
# 计算Rhat
library(coda)
mcmc.list <- mcmc.list(list(beta = beta.sample, sig2 = sig2.sample))
mcmc.list <- mcmc.list(list(beta = beta.sample, sig2 = sig2.sample))
# 计算Rhat
library(tidybayes)
mcmc.trace <- data.frame(beta = beta.sample, sig2 = sig2.sample)
mcmc_rhat(mcmc.trace)
# 计算Rhat
library(bayesplot)
mcmc_rhat(mcmc.trace)
mcmc.trace
# 设置随机数种子
set.seed(123)
# 设定模拟数据
n <- 1000
x <- rnorm(n)
y <- rnorm(n, mean = x, sd = 0.5)
# 设定先验分布
beta_0 <- 0
sig2_0 <- 1
# 设定MCMC参数
n.iter <- 2000
burn.in <- 1000
thin <- 1
# 初始化模型参数
beta <- rep(0, n.iter)
sig2 <- rep(0, n.iter)
beta[1] <- rnorm(1)
sig2[1] <- rgamma(1, shape = 0.1, scale = 0.1)
# 进行MCMC模拟
for (i in 2:n.iter) {
beta[i] <- rnorm(1, mean = sum(x * y) / (sig2[i-1] + sig2_0),
sd = sqrt(sig2[i-1] * sig2_0 / (sig2[i-1] + sig2_0) / n))
sig2[i] <- 1 / rgamma(1, shape = n / 2 + 1, scale = sum((y - beta[i] * x)^2) / 2 + sig2_0 / 2)
}
# 保留burn-in期之后的样本并进行抽样
beta.sample <- beta[(burn.in+1):n.iter][seq(1, (n.iter-burn.in)/thin, by = 1)]
sig2.sample <- sig2[(burn.in+1):n.iter][seq(1, (n.iter-burn.in)/thin, by = 1)]
# 计算Rhat
library(bayesplot)
mcmc.trace <- data.frame(beta = beta.sample, sig2 = sig2.sample)
mcmc.trace
mcmc_rhat(mcmc.trace)
mcmc_trace(mcmc.trace)
mcmc_rhat(mcmc.trace)
mcmc_trace(mcmc.trace)
mcmc_rhat(mcmc.trace)
mcmc_acf(mcmc.trace)
summary(mcmc.trace)
mcmc_rhat_data(mcmc.trace)
mcmc.trace <- example_mcmc_draws()
mcmc_trace(mcmc.trace)
mcmc_rhat_data(mcmc.trace)
mcmc_acf(mcmc.trace)
rstan::Rhat(mcmc.trace)
posterior::rhat(mcmc.trace)
mi::Rhats(mcmc.trace)
rhat(mcmc.trace)
mcmc.trace <- example_mcmc_draws(params = 1)
mcmc_trace(mcmc.trace)
dim(mcmc.trace)
mcmc_rhat_data(mcmc.trace)
rhat(mcmc.trace)
rstan::Rhat(mcmc.trace)
rhat(mcmc.trace)
posterior::rhat(mcmc.trace)
# 该样本包含一个参数，
dim(mcmc.trace)
mcmc_trace(mcmc.trace)
rep(1:n.chain, n.iter)
n.iter <- 1000
n.chain <- 4
rep(1:n.chain, n.iter)
rep(1:n.chain, each = n.iter)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter)
sigma = rnorm(n.iter,3,1)*n.chain + seq(0:0.5, n.iter)*n.chain,
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter,3,1)*n.chain + seq(0:0.5, n.iter)*n.chain,
)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter,3,1)*n.chain + seq(0:0.5, n.iter)*n.chain,
)
rnorm(n.iter,3,1)*n.chain
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0:0.5, n.iter), n.chain),
)
rnorm(n.iter * n.chain, 3, 1)
rep(seq(0:0.5, n.iter), n.chain)
rnorm(n.iter * n.chain, 3, 1) + rep(seq(0:0.5, n.iter), n.chain)
rnorm(n.iter * n.chain, 3, 1)
rep(seq(0:0.5, n.iter), n.chain)
seq(0, 1, length.out = 11)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0,0.5, n.iter), n.chain),
)
seq(0, 1, length.out = 11)
mcmc_trace(mcmc.trace)
rep(seq(0,0.5, length.out = n.iter), n.chain)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0,0.5, length.out = n.iter), n.chain),
)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0,0.5, length.out = n.iter), n.chain)
)
mcmc_trace(mcmc.trace)
posterior::rhat(mcmc.trace)
mcmc_acf(mcmc.trace)
posterior::rhat(mcmc.trace)
extract_variable_matrix(mcmc.trace, "sigma")
posterior::extract_variable_matrix(mcmc.trace, "sigma")
posterior::rhat(posterior::extract_variable_matrix(mcmc.trace, "sigma"))
n.iter <- 1000
n.chain <- 4
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0,1, length.out = n.iter), n.chain)
)
mcmc_trace(mcmc.trace)
posterior::rhat(posterior::extract_variable_matrix(mcmc.trace, "sigma"))
aa = posterior::extract_variable_matrix(mcmc.trace, "sigma")
View(aa)
n.iter <- 1000
n.chain <- 4
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter * n.chain, 3, 1) + rep(seq(0,2, length.out = n.iter), n.chain)
)
mcmc_trace(mcmc.trace)
posterior::rhat( posterior::extract_variable_matrix(mcmc.trace, "sigma") )
mcmc_acf(mcmc.trace)
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter, runif(n.chain), runif(n.chain))
)
mcmc_trace(mcmc.trace)
posterior::rhat( posterior::extract_variable_matrix(mcmc.trace, "sigma") )
mcmc_acf(mcmc.trace)
library(bayesplot)
# 设置随机数种子
set.seed(123)
n.iter <- 1000
n.chain <- 4
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter, runif(n.chain), runif(n.chain))
)
mcmc_trace(mcmc.trace)
posterior::rhat( posterior::extract_variable_matrix(mcmc.trace, "sigma") )
# 设置随机数种子
set.seed(2023)
n.iter <- 1000
n.chain <- 4
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.iter, runif(n.chain), runif(n.chain))
)
mcmc_trace(mcmc.trace)
posterior::rhat( posterior::extract_variable_matrix(mcmc.trace, "sigma") )
mcmc.trace = example_mcmc_draws()
mcmc_trace(mcmc.trace)
mcmc.trace = example_mcmc_draws(params = 1)
mcmc_trace(mcmc.trace)
posterior::rhat( posterior::extract_variable_matrix(mcmc.trace, "sigma") )
posterior::rhat( mcmc.trace )
mcmc.trace = example_mcmc_draws(params = 1, ndraw = 1000)
mcmc.trace = rbind(example_mcmc_draws(params = 1),example_mcmc_draws(params = 1))
mcmc_trace(mcmc.trace)
mcmc.trace
mcmc.trace = abind(example_mcmc_draws(params = 1),example_mcmc_draws(params = 1), along = 2)
mcmc.trace = abind(example_mcmc_draws(params = 1),example_mcmc_draws(params = 1), along = 2)
mcmc.trace = abind::abind(example_mcmc_draws(params = 1),example_mcmc_draws(params = 1), along = 2)
mcmc_trace(mcmc.trace)
example_mcmc_draws(params = 1)
mcmc.trace = abind::abind(example_mcmc_draws(params = 1),example_mcmc_draws(params = 1), along = 1)
mcmc_trace(mcmc.trace)
posterior::rhat( mcmc.trace )
mcmc.trace = abind::abind(
example_mcmc_draws(params = 1),
example_mcmc_draws(params = 1),
example_mcmc_draws(params = 1),
example_mcmc_draws(params = 1),
along = 1)
mcmc_trace(mcmc.trace)
posterior::rhat( mcmc.trace )
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.chain, 3, runif(n.iter))
)
mcmc_trace(mcmc.trace)
posterior::rhat( mcmc.trace )
rnorm(n.chain, 3, runif(n.iter))
runif(n.iter)
rnorm(n.chain, 3, runif(n.iter))
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.chain,mean =  3, sd = runif(n.iter))
)
rnorm(n.chain,mean =  3, sd = runif(n.iter))
mcmc.trace <- data.frame(
Chain = rep(1:n.chain, each = n.iter),
sigma = rnorm(n.chain,mean =  runif(n.iter), sd = runif(n.iter))
)
mcmc_trace(mcmc.trace)
posterior::rhat( mcmc.trace )
rnorm(n.chain,mean =  runif(n.iter), sd = runif(n.iter))
posterior::example_draws()
mcmc.trace = posterior::example_draws()
mcmc_trace(mcmc.trace)
posterior::rhat( mcmc.trace )
mcmc.trace <- array(
rnorm(n.chain * n.iter),
dim = c(n.iter, n.chain, 1)
)
mcmc_trace(mcmc.trace)
mcmc.trace <- array(
c(sigma = rnorm(n.chain * n.iter)),
dim = c(n.iter, n.chain, 1)
)
mcmc.trace = posterior::example_draws()
mcmc.trace <- array(
c(sigma = rnorm(n.chain * n.iter)),
dim = c(n.iter, n.chain, 1)
)
mcmc_trace(mcmc.trace)
mcmc.trace <- array(
rnorm(n.chain * n.iter),
dim = c(n.iter, n.chain, 1),
dimnames = c("iteration", "Chain", "sigma")
)
mcmc.trace <- array(
rnorm(n.chain * n.iter),
dim = c(n.iter, n.chain, 1),
dimnames = c("iteration", "Chain", "sigma")
)
mcmc.trace <- array(
rnorm(n.chain * n.iter),
dim = c(n.iter, n.chain, 1),
dimnames = c("iteration", "Chain", "sigma")
)
mcmc.trace <- array(
rnorm(n.chain * n.iter),
dim = c(n.iter, n.chain, 1),
dimnames = list("iteration", "Chain", "sigma")
)
dimnames(mcmc.trace) = c("iteration", "Chain", "sigma")
library("coda")
# 设置随机数种子以确保可重复性
set.seed(2023)
# 模拟生成4条不收敛的MCMC链
n_chains <- 4
chain_length <- 1000
chains <- array(0, dim = c(chain_length, n_chains))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 10)
second_half <- rnorm(chain_length / 2, mean = 0, sd = 1)
chains[, i] <- c(first_half, second_half)
}
# 将结果转换为mcmc.list对象
mcmc_chains <- as.mcmc.list(lapply(1:n_chains, function(i) {
as.mcmc(chains[, i])
}))
# 计算R-hat
rhat <- gelman.diag(mcmc_chains)$mpsrf
print(paste0("R-hat: ", rhat))
rhat
# 模拟生成4条不收敛的MCMC链
n_chains <- 4
chain_length <- 1000
chains <- array(0, dim = c(chain_length, n_chains))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 10)
second_half <- rnorm(chain_length / 2, mean = 0, sd = 1)
chains[, i] <- c(first_half, second_half)
}
# 将结果转换为mcmc.list对象
mcmc_chains <- as.mcmc.list(lapply(1:n_chains, function(i) {
as.mcmc(chains[, i])
}))
# 将结果转换为mcmc.list对象
mcmc_chains <- as.mcmc.list(lapply(1:n_chains, function(i) {
as.mcmc(chains[, i])
}))
mcmc_trace(chains)
chains <- array(0, dim = c(chain_length, n_chains,1))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 10)
second_half <- rnorm(chain_length / 2, mean = 0, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
mcmc_trace(chains)
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( mcmc.trace )
posterior::rhat( chains )
gelman.diag(chains)
posterior::rhat( chains )
chains <- array(0, dim = c(chain_length, n_chains,1))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 10)
second_half <- rnorm(chain_length / 2, mean = 5, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( chains )
posterior::rhat( extract_variable_matrix(chains, "sigma") )
library(posterior)
posterior::rhat( extract_variable_matrix(chains, "sigma") )
posterior::rhat( chains )
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 2)
second_half <- rnorm(chain_length / 2, mean = 3, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 0, sd = 2)
second_half <- rnorm(chain_length / 2, mean = 2, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 3, sd = 1.5)
second_half <- rnorm(chain_length / 2, mean = 4, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( extract_variable_matrix(chains, "sigma") )
# 设置随机数种子以确保可重复性
set.seed(2023)
# 模拟生成4条不收敛的MCMC链
n_chains <- 4
chain_length <- 1000
chains <- array(0, dim = c(chain_length, n_chains,1))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 3, sd = 1.5)
second_half <- rnorm(chain_length / 2, mean = 4, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( extract_variable_matrix(chains, "sigma") )
library(bayesplot)
library(posterior)
# 设置随机数种子以确保可重复性
set.seed(2023)
# 模拟生成4条不收敛的MCMC链
n_chains <- 4
chain_length <- 1000
chains <- array(0, dim = c(chain_length, n_chains,1))
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 3, sd = 1.5)
second_half <- rnorm(chain_length / 2, mean = 4, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( extract_variable_matrix(chains, "sigma") )
for (i in 1:n_chains) {
first_half <- rnorm(chain_length / 2, mean = 3, sd = 2)
second_half <- rnorm(chain_length / 2, mean = 5, sd = 1)
chains[, i, 1] <- c(first_half, second_half)
}
dimnames(chains)[[3]] <- c("sigma")
mcmc_trace(chains)
posterior::rhat( extract_variable_matrix(chains, "sigma") )
#首先加载需要使用的R包
if (!require(papaja)) {library(papaja)}
if (!require(tidyverse)) {library(tidyverse)}
if (!require(faux)) {library(faux)}
set.seed(2022)
subj_n <- 80   # 总被试量：抑郁患者30人，健康对照组被试30人
trial_n <- 30  # 每张图片呈现的次数
# 固定效应
b0 <- 0.5       # 截距 (所有条件的均值)
b1 <- 6.5        # 图片类型的固定效应 (主效应)
b2 <- 0.1     # 组别的固定效应 (主效应)
b3 <- 0.1      # 图片类型与组别的交互作用
# 随机效应
u0s <- 2    # 被试的随机截距
u1s <- 2    # 被试的随机斜率 (图片类型)
# 误差项
sigma <- 2
#生成假定实验的条件的数据矩阵
df_simu <- add_random(subj = subj_n) %>%
# 添加被试的组别信息（被试间）
add_between("subj", group = c("depression", "control")) %>%
# 添加图片类型的信息（被试内）
add_within("subj", type = c("netural","positive")) %>%
# 每种图片呈现30次
add_random(trial = trial_n) %>%
# 图片类型的编码：中性=-0.5；正性=0.5
add_contrast("type", "anova", colnames = "type_code") %>%
# 被试组别的编码：抑郁症组=-0.5；控制组=0.5
add_contrast("group", "anova",colnames = "group_code") %>%
# 添加基于被试的随机截距和斜率 (图片类型)
add_ranef("subj", u0s = u0s, u1s = u1s, .cors=0.5) %>%
# 添加观察值的误差项
add_ranef(sigma = sigma) %>%
# 最后根据设置的固定效应和随机效应参数值，生成因变量。
mutate(LPP = (b0+u0s) +         # 截距
(b1+u1s) * type_code + # 图片材料的斜率
b2 * group_code +      # 组别的斜率
b3 * type_code * group_code +   # 交互作用
sigma)            #误差项
df_simu <- df_simu %>%
select(subj, group, type, LPP) # 去除冗余的信息
#查看生成的数据
head(df_simu,10)
# 设置随机数种子
set.seed(123)
# 创建实验条件
colors <- c("red", "green", "blue")
lengths <- c(50, 100, 150, 200, 250)
# 创建参与者编号和实验数据
participants <- paste0("P", 1:100)
data <- expand.grid(participant = participants, color = colors, length = lengths)
# 添加阅读速度数据
data$reading_time <- rnorm(nrow(data), mean = 10, sd = 2)
# 查看前几行数据
head(data)
library(tidyr)
# 将数据从宽格式转换为长格式
long_data <- pivot_longer(data, cols = c("reading_time"), names_to = "measure", values_to = "value")
# 分离出颜色和文本长度信息
long_data$color <- gsub("reading_time", "", long_data$measure)
long_data$length <- gsub("reading_time", "", long_data$measure)
long_data$length <- as.numeric(gsub("length_", "", long_data$length))
# 删除不需要的列
long_data$measure <- NULL
# 查看前几行数据
head(long_data)
papaja::apa_barplot(
df_simu,
id = "subj",
factors = c("type", "group"),
dv = "LPP"
)
diamonds_short <- ggplot2::diamonds %>%
filter(cut %in% c("Very Good", "Ideal")) %>%
filter(clarity %in% c("SI1", "SI2", "VS1", "VS2")) %>%
sample_frac(size = 0.05)
grouped_ggbarstats(
data          = diamonds_short,
x             = color,
y             = clarity,
grouping.var  = cut,
plotgrid.args = list(nrow = 2)
)
ggstatsplot::grouped_ggbarstats(
data          = diamonds_short,
x             = color,
y             = clarity,
grouping.var  = cut,
plotgrid.args = list(nrow = 2)
)
diamonds_short <- ggplot2::diamonds %>%
filter(cut %in% c("Very Good", "Ideal")) %>%
filter(clarity %in% c("SI1", "SI2", "VS1", "VS2")) %>%
sample_frac(size = 0.05)
ggstatsplot::grouped_ggbarstats(
data          = diamonds_short,
x             = color,
y             = clarity,
grouping.var  = cut,
plotgrid.args = list(nrow = 2)
)
df_simu |> group_by(type, group, subj) |>
summarise(LPP = mean(LPP)) |>
mutate(con = paste0(group,"-",type)) |>
ggwithinstats(
x = con,
y = RT) +
theme_apa(base_size = 16)
df_simu |> group_by(type, group, subj) |>
summarise(LPP = mean(LPP)) |>
mutate(con = paste0(group,"-",type)) |>
ggstatsplot::ggwithinstats(
x = con,
y = RT) +
theme_apa(base_size = 16)
df_simu |> group_by(type, group, subj) |>
summarise(LPP = mean(LPP)) |>
mutate(con = paste0(group,"-",type)) |>
ggstatsplot::ggwithinstats(
x = con,
y = LPP) +
theme_apa(base_size = 16)
df_simu |> group_by(type, group, subj) |>
summarise(LPP = mean(LPP)) |>
mutate(con = paste0(group,"-",type)) |>
ggstatsplot::ggbetweenstats(
x = con,
y = LPP) +
theme_apa(base_size = 16)
